<?php

/**
 * @file
 * Elasticsearch AWS Connector module file.
 */

use GuzzleHttp\Promise\RejectionException;
use Aws\Credentials\CredentialProvider;
use Aws\Signature\SignatureV4;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\Psr7\Uri;
use GuzzleHttp\Ring\Future\CompletedFutureArray;

const ELASTICSEARCH_AWS_CONNECTOR_AWS_SR_KEY = 'elasticsearch_aws_connector_aws_signed_requests';

/**
 * Implements hook_elasticsearch_connector_load_library_options_alter().
 */
function elasticsearch_aws_connector_elasticsearch_connector_load_library_options_alter(array &$options, \Drupal\elasticsearch_connector\Entity\Cluster $cluster) {
  // Return if no authentication is used.
  if (!isset($options['auth'])) {
    return;
  }

  $sign_requests = FALSE;

  // Loop over the hosts and check if AWS Signed Requests should be applied.
  foreach ($options['hosts'] as $key => $url) {
    if ($options['auth'][$url]['method'] == ELASTICSEARCH_AWS_CONNECTOR_AWS_SR_KEY) {
      $sign_requests = TRUE;
    }
  }

  // Return if AWS Signed Requests is not enabled.
  if (!$sign_requests) {
    return;
  }

  // Return if AWS Region is not set.
  if (empty($cluster->options['elasticsearch_aws_connector_aws_region'])) {
    return;
  }

  $aws_region = $cluster->options['elasticsearch_aws_connector_aws_region'];

  $psr7Handler = Aws\default_http_handler();
  $signer = new SignatureV4('es', $aws_region);
  $credentialProvider = CredentialProvider::defaultProvider();

  // Construct the handler that will be used by Elasticsearch-PHP.
  $options['handler'] = function (array $request) use (
    $psr7Handler,
    $signer,
    $credentialProvider
  ) {
    // Amazon ES listens on standard ports (443 for HTTPS, 80 for HTTP).
    $request['headers']['host'][0] = parse_url($request['headers']['host'][0], PHP_URL_HOST);

    // Create a PSR-7 request from the array passed to the handler.
    $psr7Request = new Request(
      $request['http_method'],
      (new Uri($request['uri']))
        ->withScheme($request['scheme'])
        ->withHost($request['headers']['host'][0]),
      $request['headers'],
      $request['body']
    );

    // Sign the PSR-7 request with credentials from the environment.
    try {
      $signedRequest = $signer->signRequest(
        $psr7Request,
        call_user_func($credentialProvider)->wait()
      );

      // Send the signed request to Amazon ES.
      /** @var \Psr\Http\Message\ResponseInterface $response */
      $response = $psr7Handler($signedRequest)->wait();

      // Convert the PSR-7 response to a RingPHP response.
      return new CompletedFutureArray([
        'status' => $response->getStatusCode(),
        'headers' => $response->getHeaders(),
        'body' => $response->getBody()->detach(),
        'transfer_stats' => ['total_time' => 0],
        'effective_url' => (string) $psr7Request->getUri(),
      ]);
    }
    catch (RejectionException $e) {
      /** @var GuzzleHttp\Psr7\Response $response */
      $response = $e->getReason()['response'];

      if (isset($e->getReason()['exception'])) {
        $exception = $e->getReason()['exception']->getMessage();

        drupal_set_message($exception, 'error');
        \Drupal::logger('AWS')->error('The request to Amazon could not be signed successfully. Exception: ' . $exception);
      }
    }
  };
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Using hook_form_elasticsearch_cluster_form_alter().
 */
function elasticsearch_aws_connector_form_elasticsearch_cluster_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $cluster = $form['cluster']['#value'];

  // Add our AWS Signed Requests authentication type to the form.
  if (isset($form['options']['authentication_type'])) {
    $form['options']['authentication_type']['#options'][ELASTICSEARCH_AWS_CONNECTOR_AWS_SR_KEY] = t('Amazon Web Services - signed requests');
  }

  // Hide username field when the "AWS signed requests" options is selected.
  $form['options']['username']['#states']['invisible'][':input[name="options[authentication_type]"]'] = ['value' => ELASTICSEARCH_AWS_CONNECTOR_AWS_SR_KEY];
  // Hide password field when the "AWS signed requests" options is selected.
  $form['options']['password']['#states']['invisible'][':input[name="options[authentication_type]"]'] = ['value' => ELASTICSEARCH_AWS_CONNECTOR_AWS_SR_KEY];

  // Show AWS region field when the "AWS signed requests" options is selected.
  $form['options']['elasticsearch_aws_connector_aws_region'] = [
    '#type' => 'textfield',
    '#title' => t('Amazon Web Services - region'),
    '#description' => t('The region of the AWS cluster.'),
    '#default_value' => (!empty($cluster->options['elasticsearch_aws_connector_aws_region']) ? $cluster->options['elasticsearch_aws_connector_aws_region'] : ''),
    '#states' => [
      'visible' => [
        ':input[name="options[authentication_type]"]' => ['value' => ELASTICSEARCH_AWS_CONNECTOR_AWS_SR_KEY],
      ],
    ],
    '#weight' => 5.4,
  ];

  $form['#validate'][] = 'elasticsearch_aws_connector_form_elasticsearch_cluster_form_validate';
}

/**
 * Form validation for Elasticsearch AWS Connector form.
 *
 * @see elasticsearch_aws_connector_form_elasticsearch_cluster_form_alter()
 */
function elasticsearch_aws_connector_form_elasticsearch_cluster_form_validate(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
  $options = $form_state->getValue('options');

  if (!empty($options['elasticsearch_aws_connector_aws_region'])) {
    // Lowercase & remove whitespace from AWS region.
    $aws_region = strtolower(trim($options['elasticsearch_aws_connector_aws_region']));
    $options['elasticsearch_aws_connector_aws_region'] = $aws_region;
  }

  $form_state->setValue('options', $options);
}
